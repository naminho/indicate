import Arrow from './Arrow'
import addClass from './../helpers/add-class'

/**
 * Uses the provided url as a background image for the arrows.
 * The left one is expected, the others will be generated by rotation.
 **/
export default class ArrowUrl extends Arrow {
  static check (options) {
    return Boolean(options.arrowUrl)
  }

  create (instance) {
    this.setArrowUrl(instance)
  }

  update (instance) {
    this.setArrowUrl(instance)
  }

  setArrowUrl (instance) {
    const arrowUrl = this.options.arrowUrl

    instance.directions.map(direction => {
      const arrow = instance.arrows[direction]
      arrow.style.backgroundImage = `url(${arrowUrl})`
      arrow.style.backgroundRepeat = 'no-repeat'
      arrow.style.backgroundSize = 'contain'

      this.setArrowRotation(arrow, direction)
      this.setArrowBackgroundPosition(arrow, direction)

      // This will remove the default before element.
      addClass(arrow, 'idc-no-before')
    })
  }

  // Arrow position for vertical direction is always center.
  setArrowBackgroundPosition (arrow, direction) {
    const arrowPosition = this.options.arrowPosition

    if (
      arrowPosition === 'center' ||
      direction === 'top' ||
      direction === 'bottom'
    ) {
      arrow.style.backgroundPosition = 'center'
      return
    }

    if (arrowPosition === 'start' || arrowPosition === 'top') {
      if (direction === 'left') {
        arrow.style.backgroundPosition = 'top'
        return
      }
      // Because arrows are generated by rotation these have to be switched for right
      arrow.style.backgroundPosition = 'bottom'
      return
    }

    if (arrowPosition === 'end' || arrowPosition === 'bottom') {
      if (direction === 'left') {
        arrow.style.backgroundPosition = 'bottom'
        return
      }
      arrow.style.backgroundPosition = 'top'
    }
  }
}
